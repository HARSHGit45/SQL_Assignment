1) 
create table stud11(  roll number(4),  att number(3),  status varchar(15),  primary key(roll));
select * from stud11;

      ROLL        ATT STATUS
---------- ---------- ---------------
        77         89 
        72         40
        71         80
        69         45

output :
SQL> set serveroutput on
SQL> ;
  1  Declare
  2  mroll number(10);
  3  matt number(10);
  4  Begin
  5  mroll:= &mroll;
  6  select att into matt from stud11 where roll = mroll;
  7  if matt<75 then
  8  dbms_output.put_line(mroll||'is detained');
  9  update stud11 set status='D'where roll=mroll;
 10  else
 11  dbms_output.put_line(mroll||'is Not detained');
 12  update stud11 set status='ND'where roll=mroll;
 13  end if;
 14  Exception
 15  when no_data_found then
 16  dbms_output.put_line(mroll||'Not found');
 17* End;
SQL>
SQL> /
Enter value for mroll: 77
old   5: mroll:= &mroll;
new   5: mroll:= 77;
77is Not detained

PL/SQL procedure successfully completed.

SQL> select * from stud11;

      ROLL        ATT STATUS
---------- ---------- ---------------
        77         89 ND
        72         40
        71         80
        69         45


2) 
create table account_master( acc_no number(10),bal number(10), primary key(acc_no));
output : 

SQL> declare
  2  acc number(10);
  3  bal number(10);
  4  amt number(10);
  5  ex1 exception;
  6  begin
  7  acc:=&acc;
  8  amt:=&amt;
  9  select bal into bal from account_master where acc_no=acc;
 10  if amt>bal then
 11  raise ex1;
 12  else
 13  update  account_master set bal=bal-amt where acc_no=acc;
 14  end if;
 15  exception
 16  when ex1 then
 17  dbms_output.put_line('Balance innsufficient');
 18  end;
 19  /
Enter value for acc: 1234
old   7: acc:=&acc;
new   7: acc:=1234;
Enter value for amt: 500
old   8: amt:=&amt;
new   8: amt:=500;

PL/SQL procedure successfully completed.

SQL> /
Enter value for acc: 1234
old   7: acc:=&acc;
new   7: acc:=1234;
Enter value for amt: 60000
old   8: amt:=&amt;
new   8: amt:=60000;
Balance innsufficient

PL/SQL procedure successfully completed.

SQL> select * from account_master;

    ACC_NO        BAL
---------- ----------
      1234       7365
      4321       8965


SQL> INSERT INTO borrower (roll, dateofissue, nameofbook, status)
  2  VALUES (77, TO_DATE('2023-12-28', 'YYYY-MM-DD'), 'letusc', 'issued');

1 row created.

SQL> INSERT INTO borrower (roll, dateofissue, nameofbook, status)
  2  VALUES (72, TO_DATE('2024-02-01', 'YYYY-MM-DD'), 'java', 'issued');

1 row created.

SQL> INSERT INTO borrower (roll, dateofissue, nameofbook, status)
  2  VALUES (71, TO_DATE('2024-01-15', 'YYYY-MM-DD'), 'nis', 'issued');





SQL> declare
  2   r number(3);
  3   bname varchar(20);
  4    di date;
  5  fine number(4);
  6     dor date;
  7     diff number(3);
  8      begin
  9     r:=&r;
 10    select nameofbook,dateofissue into bname,di from borrower where roll=r;
 11     select sysdate into dor from dual;
 12   diff:=to_date(dor)-to_date(di);
 13
 14     if diff<15 then
 15    dbms_output.put_line('Book was returened');
 16   insert into fine_dets(roll,dateofreturn,amount) values(r,dor,0);
 17   update borrower
 18    set status='returned'
 19   where roll=r;
 20    elsif diff<=30 then
 21  fine:=(diff-15)*5;
 22   dbms_output.put_line('Book was returened');
 23   insert into fine_dets(roll,dateofreturn,amount) values(r,dor,fine);
 24   update borrower
 25    set status='returned'
 26   where roll=r;
 27  else
 28  fine:=15*5+((diff-30)*50);
 29   dbms_output.put_line('Book was returened');
 30   insert into fine_dets(roll,dateofreturn,amount) values(r,dor,fine);
 31   update borrower
 32    set status='returned'
 33   where roll=r;
 34  end if;
 35
 36  end;
 37
 38
 39  /
Enter value for r: 77
old   9:    r:=&r;
new   9:    r:=77;

PL/SQL procedure successfully completed.

SQL> select * from fine_dets;

      ROLL DATEOFRET     AMOUNT
---------- --------- ----------
        77 15-FEB-24       1025

